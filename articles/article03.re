= Messaging APIのさまざまな機能を使ってみよう

Messaging APIには、メッセージの送信や応答だけでなくさまざまな機能が存在しています。

== メッセージ送信に関する機能

LINE公式アカウントからメッセージを送るとき、普通に送るだけでなく特定の属性を指定して送ったり、見た目にこだわったメッセージを送ったりすることができます。

=== ユーザーIDを指定して特定の人に送る

Messaging APIでメッセージを送るとき、いちばん簡単なのは友だち全員にメッセージを一斉配信するブロードキャストメッセージです。しかしユーザーのユーザーIDが取得できたら、そのユーザーIDを指定して、特定の人にだけメッセージを送ることも可能です。特定のひとりにだけ送りたいときはプッシュメッセージ、特定の数人にまとめて送りたいときはマルチキャストメッセージで送れます。

===[column] 【コラム】開発チームだけにメッセージのテスト配信がしたい
     
たとえば本番用のLINE公式アカウントと、テスト用のLINE公式アカウントを別々に用意しておいて、開発チームのメンバーだけがテスト用のLINE公式アカウントと友だちになることで、本番配信前のメッセージのテスト配信と確認を実現していたとします。

この場合、開発チームに所属していたメンバーがAさん、Bさん、Cさんの中でCさんが退職してしまうと、残ったAさん、Bさん側でCさんをテスト用のLINE公式アカウントの友だちからブロックする方法がありません。退職前にCさんに頼んで、Cさん側からテスト用のLINE公式アカウントをブロックしてもらうしかないのです。

さらに厳密に言うと、一度Aさん、Bさんの目の前でCさんにブロックの操作をしてもらったとしても、Cさんの操作でブロックは解除できるので、悪意のあるCさんが後日ブロックを解除してしまうことはとめられません。こうなると、退職したCさんにも、発売前の商品や未発表の情報を含むテスト配信のメッセージが届き続けてしまいます。

なのでテスト配信の仕組みは、「一度友だち追加されたら、開発者側からは友だち状態はコントロールできない」という前提で組んでおく必要があります。

たとえば、テスト配信のメッセージはテスト用のLINE公式アカウントから送るとしても、ブロードキャストメッセージで友だち全員に送るのではなく、開発チームのAさん、Bさん、CさんのユーザーIDを指定したマルチキャストメッセージを送る、という方法がお勧めです。これならCさんの退職後、開発チームに残ったAさんBさんが送信対象からCさんのユーザーIDを消せば、Cさんには公開前のテストメッセージは届かなくなります。

===[/column]

=== メッセージの配信対象を属性で絞り込む

ナローキャストメッセージで、性別や年齢、地域、友だちになってからの期間といった属性情報を指定して送ることも可能です。

 * 属性情報やリターゲティングを利用して複数のユーザーに送信する（ナローキャストメッセージ）
 ** @<href>{https://developers.line.biz/ja/docs/messaging-api/sending-messages/#send-narrowcast-message}

=== メッセージ送信元のアイコンと表示名を変更する

メッセージを送るときに、送信元のアイコンと表示名を変更して送ることができます。たとえばテーマパークのLINE公式アカウントで、特定のキャラクターにちなんだイベントを告知するときだけ、メッセージの送信元をそのキャラクターのアイコンと名前にする、といった使い方が可能です。

 * アイコンおよび表示名を変更する
 ** @<href>{https://developers.line.biz/ja/docs/messaging-api/icon-nickname-switch/}

===[column] 【コラム】URLを送る前にOGPの見た目を事前に確認したり、キャッシュを消したりしたい

LINEでURLを含むメッセージを送ると、こんなふうにプレビューが表示されます。（@<img>{url-preview}）

//image[url-preview][URLのプレビュー][scale=0.4]{
//}

実際にメッセージを送る前に、このプレビューでどんな画像やテキストが表示されるのか、確認したかったらどうすればいいのでしょう？

実はPagePokerという公式のツールを使うと、対象ページのOGPタグ@<fn>{ogp}を読み込んで、どんなふうにプレビューが表示されるのかを事前に確認できます。@<fn>{card-validator}

 * Pagepoker @<href>{https://poker.line.naver.jp/}

「Clear Cache」にチェックを入れることで、LINE側サーバーのキャッシュも削除できるということなので、ウェブサイト側でOGPの画像を差し替えた後にここでキャッシュを削除すれば、「URLを投げたらうっかり古い画像がプレビューで表示されてしまった」という事態も避けられます。

OGPタグの書き方については、LINE DevelopersサイトのFAQを参考にしてください。

 * トークとLINE VOOM内のURLプレビューはどのようにして生成されますか？
 ** @<href>{https://developers.line.biz/ja/faq/#how-are-the-url-previews-generated}

===[/column]

//footnote[ogp][OGPはOpen Graph Protcolの略です。HTMLにメタデータとして「og:image」のようなOGPタグを書いておくことで、TwitterやLINEなどでそのURLを共有したときに、URLそのままではなく対象ページのタイトルや概要、画像などがカードのように表示されます。]
//footnote[card-validator][TwitterのCard Validatorとか、Facebookのシェアデバッガーみたいなものですね。Card Validatorは気づいたらプレビュー確認機能がなくなっていたけれど。 @<href>{https://cards-dev.twitter.com/validator} @<href>{https://developers.facebook.com/tools/debug/}]

=== Flex Messageで見た目にこだわったメッセージを送る

レイアウトを自由にカスタマイズできるFlex Messageなら、見た目にこだわったメッセージが送れます。

そしてFlex Message Simulator（ログイン必須）を使えば、JSONのコードを自分で書かなくてもFlex Messageが作れます。

 * Flex Message Simulator
 ** @<href>{https://developers.line.biz/flex-simulator/}

ただしFlex Message Simulatorで出力されるJSONは、messages直下のFlex Message全体ではなく、コンテナ（contents以下）なので注意が必要です。

=== エラーの統計情報

ボットサーバーでWebhookを受け取って、きちんとステータスコード200が返せなかった場合、エラーの統計情報でそのログが確認できます。友だちがメッセージを送ってきたのに、LINE公式アカウントからきちんと返信が送れていない場合は、ボットサーバーのログと共に、このエラーの統計情報も確認しましょう。

 * Webhookの送信におけるエラーの統計情報を確認する
 ** @<href>{https://developers.line.biz/ja/docs/messaging-api/receiving-messages/#error-statistics-aggregation}

=== ボットサーバーがWebhookを受け取れなかったときの再送機能

たとえばLINE公式アカウントが急に有名になり、一気に友だちが増えて、メッセージが大量に送られてきたとします。急なアクセス集中でサイトが落ちるように、LINEプラットフォーム飛んでくるWebhookのリクエストによって、ボットサーバーが過負荷になって応答できなくなってしまったらどうなるのでしょうか。

そんなときのために「Webhookの再送@<fn>{retry-webhook}」という機能があります。Webhookの再送はデフォルトではオフになっていますが、LINE Developersコンソールでオンにすることで、ボットサーバーがWebhookを受け取れなかったときに再送してくれるようになります。

//footnote[retry-webhook][受け取りに失敗したWebhookを再送する | LINE Developers @<href>{https://developers.line.biz/ja/docs/messaging-api/receiving-messages/#webhook-redelivery}]

どこで「Webhookを受け取れなかった」と判断されるのかというと、LINEプラットフォームから見て、「Webhookを受け取ってー！」というリクエストに対してきちんとステータスコード200が返ってこなければ「ボットサーバーはWebhookを受け取れなかった」と判断されます。

とても便利に見えるWebhookの再送機能ですが、ボットサーバーから見て「Webhookを受け取ってー！」というリクエストに対して、きちんとステータスコード200を返したつもりでも、ボットサーバーからLINEプラットフォームまでのネットワーク経路上で何か問題があって、きちんとレスポンスがLINEプラットフォームまで到達しないケースは考えられます。その場合、Webhookの再送をオンにしたことで次のようなトラブルが考えられます。

 1. ユーザーが『購入する』というメッセージを送信する
 1. LINEプラットフォームからボットサーバーに『購入する』というメッセージのWebhookが飛ぶ
 1. ボットサーバーでWebhookを受け取ってステータスコード200を返し、商品購入処理を行った上でユーザーに「購入完了しました！」という応答メッセージを送る
 1. しかし何らかの理由でステータスコード200のレスポンスがLINEプラットフォームに到達しなかった
 1. LINEプラットフォームは「ボットサーバーがWebhookを受け取れなかった」と判断して、『購入する』というメッセージのWebhookを再送する
 1. ボットサーバーでWebhookを受け取ってステータスコード200を返し、商品購入処理を行った上でユーザーに「購入完了しました！」という応答メッセージを送る
 1. ユーザーは一度『購入する』と送っただけなのに、商品が2つ購入されてしまい、購入完了メッセージも2度届いて驚く

これを防ぐためには、ボットサーバー側で商品購入処理を行う際に、Webhookのイベントごとに一意な値であるwebhookEventIdを確認して、「既に購入処理を行ったWebhookイベントと同一のイベントではないか？」を確認する必要があります。

Webhookの再送は便利な機能ですが、このように意図しない再送が行われたときのことを考えた重複チェックの処理がなければ、迂闊にオンにするべきではありません。

=={richmenus} リッチメニュー

LINE公式アカウントと友だちになると、トーク画面の下部にこんなメニューが表示されます。テキストだけでなく、画像でできた贅沢な多彩なメニュー…つまりリッチなメニュー…リッチなメニューなので…リッチメニュー！そう、これがリッチメニューです。わぁ、リッチ！（@<img>{richmenu}）

//image[richmenu][リッチメニュー][scale=0.4]{
//}

このリッチメニューは、一番下の「メニュー」と書いてあるバーをタップすることで閉じたり開いたりできます。このバーのテキストも、デフォルトの「メニュー」から「メニューはこちら」「お問い合わせの入力はこちら」「ほっとするブレイクタイムを」「会員証」「お役立ち情報はこちら」「人気ランキングをチェック！」「こちらもチェック」「荷物の追跡・再配達・集荷受付」といった様々なテキストに変更できます。

リッチメニューの実態は1枚の画像であり、画像内の各領域にそれぞれリンクを設定することで、公式サイトや予約ページ、特定の機能などにユーザーを誘導できます。

=== リッチメニュープレイグラウンドでリッチメニューを体験してみる

リッチメニューの様々な機能は、文字で説明するより体験してみるのが一番分かりやすいです。公式で提供されているリッチメニュープレイグラウンドという、「リッチメニューを体験するためのLINE公式アカウント」と友だちになってみましょう。（@<img>{richmenu-playground-qrcode}）

//image[richmenu-playground-qrcode][リッチメニュープレイグラウンドと友だちになる][scale=0.4]{
//}

「リッチメニューを開く」をタップすると、「メッセージアクションを試す」と表示されます。これは「ユーザーがリッチメニューをタップすることで、特定のメッセージをユーザーから自動送信させる」という機能です。早速試してみましょう。

あなたが入力した訳でも送った訳でもないのに、「message sent successfully!」というメッセージがあなたから送信されました。これがメッセージアクションです。メッセージアクションによって、ユーザーからLINE公式アカウントに対してメッセージが送られ、それによってこんなWebhookがボットサーバーに届きましたよ、というのを解説してくれています。

たとえば「再配達の申し込みをしたかったら、LINEで『再配達』というメッセージを送ってね」のように、ユーザーに手入力を促さなくても、リッチメニューに「再配達の申し込み」というボタンを用意して、そのボタンの領域をタップしたら「再配達」というメッセージが自動送信されるよう、対象の領域にメッセージアクションを設定しておけばいいのです。

=== リッチメニューの画像を作る

LINE Official Account Managerでリッチメニューの作成画面を開くと、「デザインガイド」というボタンがあり、そこからリッチメニューのテンプレート画像がダウンロードできます。本書ではこのテンプレートをそのまま使ってリッチメニューを設定してみます。

リッチメニューの画像は、LINE Official Account Managerで作成することも可能ですし、Canvaなどで自作しても構いません。サイズの制約は横幅が800px以上2500px以下、高さが250px以上となっています。参考までに3マスが2段重ねで6マス分のテンプレート画像だと横幅が2500px、高さが1686pxで作られていました。

=== LINE Official Account ManagerとMessaging APIでのリッチメニューの制約の違い

リッチメニューはMessaging APIで頑張ってJSONを組み立てて作らなくても、実はLINE Official Account Managerという管理画面上で、GUIでぽちぽち作ることも可能です。

前述のあいさつメッセージのように、GUIのLINE Official Account Managerと、CUIのMessaging APIは、どちらか一方しか使えないというものではなく、リッチメニューはLINE Official Account Managerで設定し、メッセージの送信はMessaging APIを使う、というように機能によって使い分けが可能です。

ただし、LINE Official Account Managerでは大が7種類、小が5種類という特定のサイズと形からしか選べません。また全員に同じリッチメニューを出す機能しかないため、会員証を持っている人にだけ会員向けのリッチメニューを出す、といった出し分けもできません。Messaging APIであれば、縦横のサイズや、それぞれの領域も自由に設定でき、ユーザーごとに別々のリッチメニューを表示させることも可能です。Messaging APIなら、タブ切り替えのようなリッチメニューを作ることもできます。

限定された機能で構わないのでGUIの管理画面からラクに設定したいならLINE Official Account Managerを使えばいいし、色んな機能を使い倒して限界まで自由にやりたいのであれば、Messaging APIを使って自分だけの管理画面を作るのがオススメです。

=== リッチメニューを設定する

リッチメニューは3つのステップで設定します。

 1. リッチメニューを作る
 2. そのリッチメニューに画像をアップロードする
 3. それをデフォルトのリッチメニューとして設定する

=== リッチメニューの設定方法と表示の優先順位

リッチメニューには以下の3つがあり、複数設定されていた場合は、上から順に優先的に表示されます。

 1. Messaging APIで設定するユーザー単位のリッチメニュー
 1. Messaging APIで設定するデフォルトのリッチメニュー
 1. LINE Official Account Managerで設定するデフォルトのリッチメニュー

== Messaging APIをもっと楽しむために

ここまでMessaging APIを使ってLINE Botを作ってきましたが、はじめてのチャットボット作りは楽しんでもらえましたか？

最後に、一歩踏み出したあなたがこれからMessaging APIをもっと楽しむために、「この先にはこんな道やあんな道がありますよ」という、さまざまな道のご紹介をしたいと思います。

=== Messaging API以外のプロダクトとの組み合わせ

LINE APIには、Messaging APIの他に、LINEログインやLIFF (LINE Front-end Framework) やLINEミニアプリ、LINE Social Pluginsなどさまざまなプロダクトがあります。Messaging API単体でできることが把握できたら、他のプロダクトと組み合わせるとさらにどんなことができるのか、LINE Developersサイトで見てみましょう。

 * LINE Developersサイト
 ** @<href>{https://developers.line.biz/}

=== LINEキャンパスで資格を取ってみよう

「Messaging APIの前提知識として、もう少しLINE公式アカウントについて学びたい」という場合は総合学習プラットフォーム「LINEキャンパス」がお勧めです。「LINE公式アカウント Basic」と「LINE公式アカウント Advanced」という認定資格の取得を目指して、学習コースや資格認定コースを無料で受講してみましょう。

 * LINEキャンパス
 ** @<href>{https://campus.line.biz/}

=== LINE Creative Labを使おう

LINE Creative Labを使うと、画像メッセージとして送れる素材が簡単に作れます。

 * LINE Creative Lab
 ** @<href>{https://creativelab.line.biz/}

=== PC版のLINEを使おう

スマートフォンのLINEと同じアカウントで、PC版のLINEも使えます。メッセージの確認などはPC版のLINEでやると便利です。ただしリッチメニューなど、PC版のLINEではサポートされていない機能も一部ありますのでご注意ください。

 * パソコンでLINEを利用する｜LINEみんなの使い方ガイド
 ** @<href>{https://guide.line.me/ja/services/pc-line.html}

=== LINE Developers communityに参加しよう

LINE APIを活用している有志によって、LINE Developers communityのイベントが定期的に開催されています。LINE API Expertとして認定されたみなさんが、最新機能や開発手法をオンラインで教えてくれるので、ひとりで悩まずにコミュニティに参加してみるのがお勧めです。LINE Developers communityのサイトにはユーザー同士のQ&Aもあり、開発でつまづいたときは質問を投稿したり、過去の質問からヒントを探したりできます。

 * LINE Developers community
 ** @<href>{https://www.line-community.me/}
